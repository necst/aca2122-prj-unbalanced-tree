-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_27 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_27 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_17E8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010111111010001010";
    constant ap_const_lv32_1AD10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011010110100010000";
    constant ap_const_lv32_FFFEFC7D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101111110001111101";
    constant ap_const_lv32_15420 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101010000100000";
    constant ap_const_lv32_FFFF52A7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110101001010100111";
    constant ap_const_lv32_BA7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011101001111101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_FFFFFB6E : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111101101101110";
    constant ap_const_lv32_FFFFE64A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110011001001010";
    constant ap_const_lv32_6B9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110101110011100";
    constant ap_const_lv32_FFFFEB22 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110101100100010";
    constant ap_const_lv32_BE67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011111001100111";
    constant ap_const_lv32_E056 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001110000001010110";
    constant ap_const_lv32_141B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010000011011";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_150_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_151_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_190_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_152_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_191_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_153_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_154_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_86_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_24_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_192_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_90_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_fu_198_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_86_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_193_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_fu_208_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln208_111_fu_222_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_87_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_26_fu_230_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_88_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_194_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_112_fu_240_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_89_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_113_fu_254_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_270_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_270_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_axi_mux_73_32_1_1_x4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_73_32_1_1_x4_U201 : component myproject_axi_mux_73_32_1_1_x4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_FFFFFB6E,
        din1 => ap_const_lv32_FFFFE64A,
        din2 => ap_const_lv32_6B9C,
        din3 => ap_const_lv32_FFFFEB22,
        din4 => ap_const_lv32_BE67,
        din5 => ap_const_lv32_E056,
        din6 => ap_const_lv32_141B,
        din7 => agg_result_fu_270_p8,
        dout => agg_result_fu_270_p9);




    activation_190_fu_126_p2 <= (comparison_fu_90_p2 xor ap_const_lv1_1);
    activation_191_fu_132_p2 <= (comparison_fu_90_p2 and comparison_150_fu_96_p2);
    activation_192_fu_156_p2 <= (comparison_152_fu_108_p2 and activation_191_fu_132_p2);
    activation_193_fu_168_p2 <= (comparison_fu_90_p2 and and_ln193_fu_162_p2);
    activation_194_fu_180_p2 <= (xor_ln195_24_fu_150_p2 and and_ln193_86_fu_174_p2);
    activation_fu_144_p2 <= (comparison_151_fu_102_p2 and activation_190_fu_126_p2);
    agg_result_fu_270_p8 <= 
        select_ln208_113_fu_254_p3 when (or_ln208_89_fu_248_p2(0) = '1') else 
        ap_const_lv3_6;
    and_ln193_86_fu_174_p2 <= (comparison_154_fu_120_p2 and activation_190_fu_126_p2);
    and_ln193_fu_162_p2 <= (xor_ln195_fu_138_p2 and comparison_153_fu_114_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= agg_result_fu_270_p9;
    comparison_150_fu_96_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_1AD10)) else "0";
    comparison_151_fu_102_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_FFFEFC7D)) else "0";
    comparison_152_fu_108_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_15420)) else "0";
    comparison_153_fu_114_p2 <= "1" when (signed(p_read5) < signed(ap_const_lv32_FFFF52A7)) else "0";
    comparison_154_fu_120_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_BA7D)) else "0";
    comparison_fu_90_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_17E8A)) else "0";
    or_ln208_86_fu_202_p2 <= (activation_fu_144_p2 or activation_191_fu_132_p2);
    or_ln208_87_fu_216_p2 <= (or_ln208_86_fu_202_p2 or activation_193_fu_168_p2);
    or_ln208_88_fu_234_p2 <= (comparison_fu_90_p2 or activation_fu_144_p2);
    or_ln208_89_fu_248_p2 <= (or_ln208_88_fu_234_p2 or activation_194_fu_180_p2);
    or_ln208_90_fu_192_p2 <= (xor_ln195_24_fu_150_p2 or comparison_fu_90_p2);
    or_ln208_fu_186_p2 <= (activation_fu_144_p2 or activation_192_fu_156_p2);
    select_ln208_111_fu_222_p3 <= 
        select_ln208_fu_208_p3 when (or_ln208_86_fu_202_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln208_112_fu_240_p3 <= 
        zext_ln208_26_fu_230_p1 when (or_ln208_87_fu_216_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln208_113_fu_254_p3 <= 
        select_ln208_112_fu_240_p3 when (or_ln208_88_fu_234_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln208_fu_208_p3 <= 
        zext_ln208_fu_198_p1 when (or_ln208_fu_186_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln195_24_fu_150_p2 <= (comparison_151_fu_102_p2 xor ap_const_lv1_1);
    xor_ln195_fu_138_p2 <= (comparison_150_fu_96_p2 xor ap_const_lv1_1);
    zext_ln208_26_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_111_fu_222_p3),3));
    zext_ln208_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln208_90_fu_192_p2),2));
end behav;
