-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_32 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_32 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_FFFE3320 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111100011001100100000";
    constant ap_const_lv32_FFFFB88B : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111011100010001011";
    constant ap_const_lv32_FFFF78B8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110111100010111000";
    constant ap_const_lv32_FFFFD1D5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101000111010101";
    constant ap_const_lv32_13F98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010011111110011000";
    constant ap_const_lv32_12E05 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010010111000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_11557 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010001010101010111";
    constant ap_const_lv32_8795 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000011110010101";
    constant ap_const_lv32_FFFFD64D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101011001001101";
    constant ap_const_lv32_267C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011001111100";
    constant ap_const_lv32_CBDB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001100101111011011";
    constant ap_const_lv32_FFFFCC54 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111100110001010100";
    constant ap_const_lv32_5F12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101111100010010";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_119_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_120_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_149_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_121_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_122_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_123_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_102_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_28_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_154_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_155_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_73_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_fu_206_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal activation_156_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_fu_210_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln208_91_fu_224_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_74_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_21_fu_232_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_75_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_157_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_92_fu_242_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_76_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_93_fu_256_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_272_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_272_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_axi_mux_73_32_1_1_x2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_73_32_1_1_x2_U170 : component myproject_axi_mux_73_32_1_1_x2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_11557,
        din1 => ap_const_lv32_8795,
        din2 => ap_const_lv32_FFFFD64D,
        din3 => ap_const_lv32_267C,
        din4 => ap_const_lv32_CBDB,
        din5 => ap_const_lv32_FFFFCC54,
        din6 => ap_const_lv32_5F12,
        din7 => agg_result_fu_272_p8,
        dout => agg_result_fu_272_p9);




    activation_149_fu_134_p2 <= (comparison_fu_98_p2 xor ap_const_lv1_1);
    activation_154_fu_146_p2 <= (xor_ln195_fu_140_p2 and comparison_fu_98_p2);
    activation_155_fu_170_p2 <= (comparison_119_fu_104_p2 and and_ln193_fu_164_p2);
    activation_156_fu_176_p2 <= (comparison_122_fu_122_p2 and activation_fu_152_p2);
    activation_157_fu_188_p2 <= (xor_ln195_28_fu_158_p2 and and_ln193_102_fu_182_p2);
    activation_fu_152_p2 <= (comparison_120_fu_110_p2 and activation_149_fu_134_p2);
    agg_result_fu_272_p8 <= 
        select_ln208_93_fu_256_p3 when (or_ln208_76_fu_250_p2(0) = '1') else 
        ap_const_lv3_6;
    and_ln193_102_fu_182_p2 <= (comparison_123_fu_128_p2 and activation_149_fu_134_p2);
    and_ln193_fu_164_p2 <= (comparison_fu_98_p2 and comparison_121_fu_116_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= agg_result_fu_272_p9;
    comparison_119_fu_104_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_FFFFB88B)) else "0";
    comparison_120_fu_110_p2 <= "1" when (signed(p_read5) < signed(ap_const_lv32_FFFF78B8)) else "0";
    comparison_121_fu_116_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FFFFD1D5)) else "0";
    comparison_122_fu_122_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_13F98)) else "0";
    comparison_123_fu_128_p2 <= "1" when (signed(p_read6) < signed(ap_const_lv32_12E05)) else "0";
    comparison_fu_98_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_FFFE3320)) else "0";
    or_ln208_73_fu_200_p2 <= (comparison_119_fu_104_p2 or activation_149_fu_134_p2);
    or_ln208_74_fu_218_p2 <= (comparison_fu_98_p2 or activation_156_fu_176_p2);
    or_ln208_75_fu_236_p2 <= (comparison_fu_98_p2 or activation_fu_152_p2);
    or_ln208_76_fu_250_p2 <= (or_ln208_75_fu_236_p2 or activation_157_fu_188_p2);
    or_ln208_fu_194_p2 <= (activation_155_fu_170_p2 or activation_154_fu_146_p2);
    select_ln208_91_fu_224_p3 <= 
        select_ln208_fu_210_p3 when (comparison_fu_98_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln208_92_fu_242_p3 <= 
        zext_ln208_21_fu_232_p1 when (or_ln208_74_fu_218_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln208_93_fu_256_p3 <= 
        select_ln208_92_fu_242_p3 when (or_ln208_75_fu_236_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln208_fu_210_p3 <= 
        zext_ln208_fu_206_p1 when (or_ln208_fu_194_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln195_28_fu_158_p2 <= (comparison_120_fu_110_p2 xor ap_const_lv1_1);
    xor_ln195_fu_140_p2 <= (comparison_119_fu_104_p2 xor ap_const_lv1_1);
    zext_ln208_21_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_91_fu_224_p3),3));
    zext_ln208_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln208_73_fu_200_p2),2));
end behav;
