-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_6 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_FFFF9B2E : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111001101100101110";
    constant ap_const_lv32_FFFE83D4 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101000001111010100";
    constant ap_const_lv32_1FFBA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011111111110111010";
    constant ap_const_lv32_FFFEDF82 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101101111110000010";
    constant ap_const_lv32_16872 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010110100001110010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_CD86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001100110110000110";
    constant ap_const_lv32_93D9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001001001111011001";
    constant ap_const_lv32_8EF7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000111011110111";
    constant ap_const_lv32_39A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011010";
    constant ap_const_lv32_FFFFDC8A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101110010001010";
    constant ap_const_lv32_5709 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101011100001001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_18_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_19_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_6_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_22_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_20_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_21_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_20_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_23_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln208_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_24_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_fu_172_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_12_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_fu_182_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln208_15_fu_196_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_13_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_25_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_4_fu_204_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_14_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_16_fu_214_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_230_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_230_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_axi_mux_63_32_1_1_x1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_63_32_1_1_x1_U326 : component myproject_axi_mux_63_32_1_1_x1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_CD86,
        din1 => ap_const_lv32_93D9,
        din2 => ap_const_lv32_8EF7,
        din3 => ap_const_lv32_39A,
        din4 => ap_const_lv32_FFFFDC8A,
        din5 => ap_const_lv32_5709,
        din6 => agg_result_fu_230_p7,
        dout => agg_result_fu_230_p8);




    activation_22_fu_106_p2 <= (comparison_fu_76_p2 xor ap_const_lv1_1);
    activation_23_fu_130_p2 <= (xor_ln195_6_fu_124_p2 and activation_22_fu_106_p2);
    activation_24_fu_142_p2 <= (comparison_fu_76_p2 and and_ln193_fu_136_p2);
    activation_25_fu_154_p2 <= (comparison_19_fu_88_p2 and and_ln193_20_fu_148_p2);
    activation_fu_112_p2 <= (comparison_fu_76_p2 and comparison_18_fu_82_p2);
    agg_result_fu_230_p7 <= 
        select_ln208_16_fu_214_p3 when (or_ln208_14_fu_208_p2(0) = '1') else 
        ap_const_lv3_5;
    and_ln193_20_fu_148_p2 <= (comparison_21_fu_100_p2 and activation_22_fu_106_p2);
    and_ln193_fu_136_p2 <= (xor_ln195_fu_118_p2 and comparison_20_fu_94_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= agg_result_fu_230_p8;
    comparison_18_fu_82_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_FFFE83D4)) else "0";
    comparison_19_fu_88_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_1FFBA)) else "0";
    comparison_20_fu_94_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FFFEDF82)) else "0";
    comparison_21_fu_100_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_16872)) else "0";
    comparison_fu_76_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_FFFF9B2E)) else "0";
    or_ln208_12_fu_176_p2 <= (or_ln208_fu_160_p2 or activation_24_fu_142_p2);
    or_ln208_13_fu_190_p2 <= (comparison_fu_76_p2 or activation_23_fu_130_p2);
    or_ln208_14_fu_208_p2 <= (or_ln208_13_fu_190_p2 or activation_25_fu_154_p2);
    or_ln208_fu_160_p2 <= (activation_fu_112_p2 or activation_23_fu_130_p2);
    select_ln208_15_fu_196_p3 <= 
        select_ln208_fu_182_p3 when (or_ln208_12_fu_176_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln208_16_fu_214_p3 <= 
        zext_ln208_4_fu_204_p1 when (or_ln208_13_fu_190_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln208_fu_182_p3 <= 
        zext_ln208_fu_172_p1 when (or_ln208_fu_160_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln195_6_fu_124_p2 <= (comparison_19_fu_88_p2 xor ap_const_lv1_1);
    xor_ln195_fu_118_p2 <= (comparison_18_fu_82_p2 xor ap_const_lv1_1);
    xor_ln208_fu_166_p2 <= (ap_const_lv1_1 xor activation_fu_112_p2);
    zext_ln208_4_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_15_fu_196_p3),3));
    zext_ln208_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln208_fu_166_p2),2));
end behav;
