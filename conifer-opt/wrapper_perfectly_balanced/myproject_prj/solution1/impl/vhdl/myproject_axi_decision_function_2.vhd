-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_2 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_14790 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010100011110010000";
    constant ap_const_lv32_FFFE1A6F : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111100001101001101111";
    constant ap_const_lv32_25A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010110100111";
    constant ap_const_lv32_180E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011000000011100110";
    constant ap_const_lv32_FFFF6961 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110110100101100001";
    constant ap_const_lv32_FFFEB8E7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101011100011100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_194F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011001010011111000";
    constant ap_const_lv32_FFFFD672 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101011001110010";
    constant ap_const_lv32_E80A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001110100000001010";
    constant ap_const_lv32_12220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010010001000100000";
    constant ap_const_lv32_FFFFE65D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110011001011101";
    constant ap_const_lv32_13A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001110100101";
    constant ap_const_lv32_15371 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101001101110001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_200_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_196_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_244_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_197_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_246_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_198_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_247_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_199_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_3_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_fu_178_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_7_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_248_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_fu_188_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln208_11_fu_202_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_8_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_3_fu_210_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_9_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_249_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_12_fu_220_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_10_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_13_fu_234_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_256_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_11_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_256_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_axi_mux_73_32_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_73_32_1_1_x_U67 : component myproject_axi_mux_73_32_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_194F8,
        din1 => ap_const_lv32_FFFFD672,
        din2 => ap_const_lv32_E80A,
        din3 => ap_const_lv32_12220,
        din4 => ap_const_lv32_FFFFE65D,
        din5 => ap_const_lv32_13A5,
        din6 => ap_const_lv32_15371,
        din7 => tmp_fu_256_p8,
        dout => tmp_fu_256_p9);




    activation_244_fu_118_p2 <= (comparison_fu_82_p2 xor ap_const_lv1_1);
    activation_246_fu_130_p2 <= (xor_ln195_fu_124_p2 and comparison_fu_82_p2);
    activation_247_fu_136_p2 <= (comparison_196_fu_94_p2 and activation_244_fu_118_p2);
    activation_248_fu_154_p2 <= (comparison_198_fu_106_p2 and activation_247_fu_136_p2);
    activation_249_fu_166_p2 <= (xor_ln195_3_fu_142_p2 and and_ln193_fu_160_p2);
    activation_fu_148_p2 <= (comparison_197_fu_100_p2 and activation_246_fu_130_p2);
    and_ln193_fu_160_p2 <= (comparison_199_fu_112_p2 and activation_244_fu_118_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        tmp_fu_256_p9 when (or_ln208_11_fu_242_p2(0) = '1') else 
        ap_const_lv32_0;
    comparison_196_fu_94_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_25A7)) else "0";
    comparison_197_fu_100_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_180E6)) else "0";
    comparison_198_fu_106_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FFFF6961)) else "0";
    comparison_199_fu_112_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_FFFEB8E7)) else "0";
    comparison_200_fu_88_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_FFFE1A6F)) else "0";
    comparison_fu_82_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_14790)) else "0";
    or_ln208_10_fu_228_p2 <= (or_ln208_9_fu_214_p2 or activation_249_fu_166_p2);
    or_ln208_11_fu_242_p2 <= (or_ln208_7_fu_182_p2 or activation_244_fu_118_p2);
    or_ln208_7_fu_182_p2 <= (comparison_200_fu_88_p2 or activation_246_fu_130_p2);
    or_ln208_8_fu_196_p2 <= (or_ln208_7_fu_182_p2 or activation_248_fu_154_p2);
    or_ln208_9_fu_214_p2 <= (or_ln208_7_fu_182_p2 or activation_247_fu_136_p2);
    or_ln208_fu_172_p2 <= (comparison_200_fu_88_p2 or activation_fu_148_p2);
    select_ln208_11_fu_202_p3 <= 
        select_ln208_fu_188_p3 when (or_ln208_7_fu_182_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln208_12_fu_220_p3 <= 
        zext_ln208_3_fu_210_p1 when (or_ln208_8_fu_196_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln208_13_fu_234_p3 <= 
        select_ln208_12_fu_220_p3 when (or_ln208_9_fu_214_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln208_fu_188_p3 <= 
        zext_ln208_fu_178_p1 when (or_ln208_fu_172_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_256_p8 <= 
        select_ln208_13_fu_234_p3 when (or_ln208_10_fu_228_p2(0) = '1') else 
        ap_const_lv3_6;
    xor_ln195_3_fu_142_p2 <= (comparison_196_fu_94_p2 xor ap_const_lv1_1);
    xor_ln195_fu_124_p2 <= (comparison_200_fu_88_p2 xor ap_const_lv1_1);
    zext_ln208_3_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_11_fu_202_p3),3));
    zext_ln208_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln195_fu_124_p2),2));
end behav;
