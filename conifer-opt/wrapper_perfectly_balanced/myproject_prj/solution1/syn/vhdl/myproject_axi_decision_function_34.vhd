-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_34 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_34 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1A55C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011010010101011100";
    constant ap_const_lv32_FFFEC2CD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101100001011001101";
    constant ap_const_lv32_FFFFF4D1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111010011010001";
    constant ap_const_lv32_6463 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110010001100011";
    constant ap_const_lv32_1702B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010111000000101011";
    constant ap_const_lv32_FFFF8446 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111000010001000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_129CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010010100111001011";
    constant ap_const_lv32_3A91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011101010010001";
    constant ap_const_lv32_C1FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001100000111111101";
    constant ap_const_lv32_FFFFDB26 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101101100100110";
    constant ap_const_lv32_8792 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000011110010010";
    constant ap_const_lv32_FFFFA98F : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111010100110001111";
    constant ap_const_lv32_6A5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110101001011010";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_111_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_112_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_140_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_113_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_141_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_114_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_115_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_108_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_29_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_142_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_66_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_fu_198_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_67_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_143_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_fu_208_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln208_85_fu_222_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_68_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_19_fu_230_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_69_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_144_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_86_fu_240_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_70_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_87_fu_254_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_270_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_270_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_axi_mux_73_32_1_1_x1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_73_32_1_1_x1_U157 : component myproject_axi_mux_73_32_1_1_x1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_129CB,
        din1 => ap_const_lv32_3A91,
        din2 => ap_const_lv32_C1FD,
        din3 => ap_const_lv32_FFFFDB26,
        din4 => ap_const_lv32_8792,
        din5 => ap_const_lv32_FFFFA98F,
        din6 => ap_const_lv32_6A5A,
        din7 => agg_result_fu_270_p8,
        dout => agg_result_fu_270_p9);




    activation_140_fu_126_p2 <= (comparison_fu_90_p2 xor ap_const_lv1_1);
    activation_141_fu_132_p2 <= (comparison_fu_90_p2 and comparison_111_fu_96_p2);
    activation_142_fu_156_p2 <= (comparison_113_fu_108_p2 and activation_141_fu_132_p2);
    activation_143_fu_168_p2 <= (comparison_fu_90_p2 and and_ln193_fu_162_p2);
    activation_144_fu_180_p2 <= (xor_ln195_29_fu_150_p2 and and_ln193_108_fu_174_p2);
    activation_fu_144_p2 <= (comparison_112_fu_102_p2 and activation_140_fu_126_p2);
    agg_result_fu_270_p8 <= 
        select_ln208_87_fu_254_p3 when (or_ln208_70_fu_248_p2(0) = '1') else 
        ap_const_lv3_6;
    and_ln193_108_fu_174_p2 <= (comparison_115_fu_120_p2 and activation_140_fu_126_p2);
    and_ln193_fu_162_p2 <= (xor_ln195_fu_138_p2 and comparison_114_fu_114_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= agg_result_fu_270_p9;
    comparison_111_fu_96_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FFFEC2CD)) else "0";
    comparison_112_fu_102_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_FFFFF4D1)) else "0";
    comparison_113_fu_108_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_6463)) else "0";
    comparison_114_fu_114_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_1702B)) else "0";
    comparison_115_fu_120_p2 <= "1" when (signed(p_read5) < signed(ap_const_lv32_FFFF8446)) else "0";
    comparison_fu_90_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_1A55C)) else "0";
    or_ln208_66_fu_192_p2 <= (xor_ln195_29_fu_150_p2 or comparison_fu_90_p2);
    or_ln208_67_fu_202_p2 <= (activation_fu_144_p2 or activation_141_fu_132_p2);
    or_ln208_68_fu_216_p2 <= (or_ln208_67_fu_202_p2 or activation_143_fu_168_p2);
    or_ln208_69_fu_234_p2 <= (comparison_fu_90_p2 or activation_fu_144_p2);
    or_ln208_70_fu_248_p2 <= (or_ln208_69_fu_234_p2 or activation_144_fu_180_p2);
    or_ln208_fu_186_p2 <= (activation_fu_144_p2 or activation_142_fu_156_p2);
    select_ln208_85_fu_222_p3 <= 
        select_ln208_fu_208_p3 when (or_ln208_67_fu_202_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln208_86_fu_240_p3 <= 
        zext_ln208_19_fu_230_p1 when (or_ln208_68_fu_216_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln208_87_fu_254_p3 <= 
        select_ln208_86_fu_240_p3 when (or_ln208_69_fu_234_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln208_fu_208_p3 <= 
        zext_ln208_fu_198_p1 when (or_ln208_fu_186_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln195_29_fu_150_p2 <= (comparison_112_fu_102_p2 xor ap_const_lv1_1);
    xor_ln195_fu_138_p2 <= (comparison_111_fu_96_p2 xor ap_const_lv1_1);
    zext_ln208_19_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_85_fu_222_p3),3));
    zext_ln208_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln208_66_fu_192_p2),2));
end behav;
