-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_21 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_FFFEE293 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101110001010010011";
    constant ap_const_lv32_FFFF1B78 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110001101101111000";
    constant ap_const_lv32_13B03 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010011101100000011";
    constant ap_const_lv32_B0FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011000011111011";
    constant ap_const_lv32_1B534 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011011010100110100";
    constant ap_const_lv32_64D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110010011010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_204F9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000010011111001";
    constant ap_const_lv32_7C1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111110000011111";
    constant ap_const_lv32_19C6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011001110001101010";
    constant ap_const_lv32_FFFFA923 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111010100100100011";
    constant ap_const_lv32_1A13D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011010000100111101";
    constant ap_const_lv32_9E97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001001111010010111";
    constant ap_const_lv32_1A6BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011010011010111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_28_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_29_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_46_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_30_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_31_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_32_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln193_18_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_3_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_51_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_52_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln208_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln208_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_fu_206_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal activation_53_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_fu_210_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln208_14_fu_224_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln208_13_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_5_fu_232_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_14_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_54_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_15_fu_242_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln208_15_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_16_fu_256_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_272_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal agg_result_fu_272_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_axi_mux_73_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_73_32_1_1_U26 : component myproject_axi_mux_73_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_204F9,
        din1 => ap_const_lv32_7C1F,
        din2 => ap_const_lv32_19C6A,
        din3 => ap_const_lv32_FFFFA923,
        din4 => ap_const_lv32_1A13D,
        din5 => ap_const_lv32_9E97,
        din6 => ap_const_lv32_1A6BF,
        din7 => agg_result_fu_272_p8,
        dout => agg_result_fu_272_p9);




    activation_46_fu_134_p2 <= (comparison_fu_98_p2 xor ap_const_lv1_1);
    activation_51_fu_140_p2 <= (comparison_fu_98_p2 and comparison_28_fu_104_p2);
    activation_52_fu_170_p2 <= (comparison_fu_98_p2 and and_ln193_fu_164_p2);
    activation_53_fu_176_p2 <= (comparison_31_fu_122_p2 and activation_fu_152_p2);
    activation_54_fu_188_p2 <= (xor_ln195_3_fu_158_p2 and and_ln193_18_fu_182_p2);
    activation_fu_152_p2 <= (comparison_29_fu_110_p2 and activation_46_fu_134_p2);
    agg_result_fu_272_p8 <= 
        select_ln208_16_fu_256_p3 when (or_ln208_15_fu_250_p2(0) = '1') else 
        ap_const_lv3_6;
    and_ln193_18_fu_182_p2 <= (comparison_32_fu_128_p2 and activation_46_fu_134_p2);
    and_ln193_fu_164_p2 <= (xor_ln195_fu_146_p2 and comparison_30_fu_116_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= agg_result_fu_272_p9;
    comparison_28_fu_104_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_FFFF1B78)) else "0";
    comparison_29_fu_110_p2 <= "1" when (signed(p_read6) < signed(ap_const_lv32_13B03)) else "0";
    comparison_30_fu_116_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_B0FB)) else "0";
    comparison_31_fu_122_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_1B534)) else "0";
    comparison_32_fu_128_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_64D0)) else "0";
    comparison_fu_98_p2 <= "1" when (signed(p_read5) < signed(ap_const_lv32_FFFEE293)) else "0";
    or_ln208_13_fu_218_p2 <= (comparison_fu_98_p2 or activation_53_fu_176_p2);
    or_ln208_14_fu_236_p2 <= (comparison_fu_98_p2 or activation_fu_152_p2);
    or_ln208_15_fu_250_p2 <= (or_ln208_14_fu_236_p2 or activation_54_fu_188_p2);
    or_ln208_fu_194_p2 <= (activation_52_fu_170_p2 or activation_51_fu_140_p2);
    select_ln208_14_fu_224_p3 <= 
        select_ln208_fu_210_p3 when (comparison_fu_98_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln208_15_fu_242_p3 <= 
        zext_ln208_5_fu_232_p1 when (or_ln208_13_fu_218_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln208_16_fu_256_p3 <= 
        select_ln208_15_fu_242_p3 when (or_ln208_14_fu_236_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln208_fu_210_p3 <= 
        zext_ln208_fu_206_p1 when (or_ln208_fu_194_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln195_3_fu_158_p2 <= (comparison_29_fu_110_p2 xor ap_const_lv1_1);
    xor_ln195_fu_146_p2 <= (comparison_28_fu_104_p2 xor ap_const_lv1_1);
    xor_ln208_fu_200_p2 <= (ap_const_lv1_1 xor activation_51_fu_140_p2);
    zext_ln208_5_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_14_fu_224_p3),3));
    zext_ln208_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln208_fu_200_p2),2));
end behav;
