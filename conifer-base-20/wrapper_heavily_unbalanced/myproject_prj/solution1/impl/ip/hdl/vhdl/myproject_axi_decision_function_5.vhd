-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_5 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_FFFE9895 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101001100010010101";
    constant ap_const_lv32_FFFEC2CD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101100001011001101";
    constant ap_const_lv32_1A694 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011010011010010100";
    constant ap_const_lv32_D1FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001101000111111011";
    constant ap_const_lv32_159BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101100110111101";
    constant ap_const_lv32_13CE7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010011110011100111";
    constant ap_const_lv32_FFFEE7C1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101110011111000001";
    constant ap_const_lv32_FFFE5C84 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111100101110010000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_EC13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001110110000010011";
    constant ap_const_lv32_C23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001100001000111111";
    constant ap_const_lv32_D09B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001101000010011011";
    constant ap_const_lv32_3FA8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011111110101000";
    constant ap_const_lv32_76D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111011011010111";
    constant ap_const_lv32_4070 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000001110000";
    constant ap_const_lv32_EC8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111011001000";
    constant ap_const_lv32_1CF3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110011110011";
    constant ap_const_lv32_FFFF1B05 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110001101100000101";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_49_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_50_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_129_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_16_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_51_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_130_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_17_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_52_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_132_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_18_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_53_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_134_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_19_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_54_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_136_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_55_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_20_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_140_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_141_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_fu_268_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln148_21_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_142_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_fu_278_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln148_22_fu_292_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln148_22_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_143_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_7_fu_300_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_23_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_144_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_23_fu_310_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_24_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_145_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_24_fu_324_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_25_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_146_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_25_fu_338_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln148_26_fu_352_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_26_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_8_fu_360_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_372_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_372_p11 : STD_LOGIC_VECTOR (31 downto 0);

    component myproject_axi_mux_94_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_94_32_1_1_U24 : component myproject_axi_mux_94_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_EC13,
        din1 => ap_const_lv32_C23F,
        din2 => ap_const_lv32_D09B,
        din3 => ap_const_lv32_3FA8,
        din4 => ap_const_lv32_76D7,
        din5 => ap_const_lv32_4070,
        din6 => ap_const_lv32_EC8,
        din7 => ap_const_lv32_1CF3,
        din8 => ap_const_lv32_FFFF1B05,
        din9 => agg_result_fu_372_p10,
        dout => agg_result_fu_372_p11);




    activation_129_fu_160_p2 <= (xor_ln135_fu_154_p2 and activation_fu_142_p2);
    activation_130_fu_166_p2 <= (comparison_50_fu_106_p2 and activation_129_fu_160_p2);
    activation_132_fu_184_p2 <= (comparison_51_fu_112_p2 and activation_130_fu_166_p2);
    activation_134_fu_202_p2 <= (comparison_52_fu_118_p2 and activation_132_fu_184_p2);
    activation_136_fu_220_p2 <= (comparison_53_fu_124_p2 and activation_134_fu_202_p2);
    activation_140_fu_148_p2 <= (comparison_49_fu_100_p2 and activation_fu_142_p2);
    activation_141_fu_178_p2 <= (xor_ln135_16_fu_172_p2 and activation_129_fu_160_p2);
    activation_142_fu_196_p2 <= (xor_ln135_17_fu_190_p2 and activation_130_fu_166_p2);
    activation_143_fu_214_p2 <= (xor_ln135_18_fu_208_p2 and activation_132_fu_184_p2);
    activation_144_fu_232_p2 <= (xor_ln135_19_fu_226_p2 and activation_134_fu_202_p2);
    activation_145_fu_238_p2 <= (comparison_54_fu_130_p2 and activation_136_fu_220_p2);
    activation_146_fu_256_p2 <= (and_ln133_fu_250_p2 and activation_136_fu_220_p2);
    activation_fu_142_p2 <= (comparison_fu_94_p2 xor ap_const_lv1_1);
    agg_result_fu_372_p10 <= 
        zext_ln148_8_fu_360_p1 when (or_ln148_26_fu_346_p2(0) = '1') else 
        ap_const_lv4_8;
    and_ln133_fu_250_p2 <= (xor_ln135_20_fu_244_p2 and comparison_55_fu_136_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= agg_result_fu_372_p11;
    comparison_49_fu_100_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FFFEC2CD)) else "0";
    comparison_50_fu_106_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_1A694)) else "0";
    comparison_51_fu_112_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_D1FB)) else "0";
    comparison_52_fu_118_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_159BD)) else "0";
    comparison_53_fu_124_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_13CE7)) else "0";
    comparison_54_fu_130_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_FFFEE7C1)) else "0";
    comparison_55_fu_136_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_FFFE5C84)) else "0";
    comparison_fu_94_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_FFFE9895)) else "0";
    or_ln148_21_fu_272_p2 <= (or_ln148_fu_262_p2 or activation_141_fu_178_p2);
    or_ln148_22_fu_286_p2 <= (or_ln148_21_fu_272_p2 or activation_142_fu_196_p2);
    or_ln148_23_fu_304_p2 <= (or_ln148_22_fu_286_p2 or activation_143_fu_214_p2);
    or_ln148_24_fu_318_p2 <= (or_ln148_23_fu_304_p2 or activation_144_fu_232_p2);
    or_ln148_25_fu_332_p2 <= (or_ln148_24_fu_318_p2 or activation_145_fu_238_p2);
    or_ln148_26_fu_346_p2 <= (or_ln148_25_fu_332_p2 or activation_146_fu_256_p2);
    or_ln148_fu_262_p2 <= (comparison_fu_94_p2 or activation_140_fu_148_p2);
    select_ln148_22_fu_292_p3 <= 
        select_ln148_fu_278_p3 when (or_ln148_21_fu_272_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln148_23_fu_310_p3 <= 
        zext_ln148_7_fu_300_p1 when (or_ln148_22_fu_286_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln148_24_fu_324_p3 <= 
        select_ln148_23_fu_310_p3 when (or_ln148_23_fu_304_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln148_25_fu_338_p3 <= 
        select_ln148_24_fu_324_p3 when (or_ln148_24_fu_318_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln148_26_fu_352_p3 <= 
        select_ln148_25_fu_338_p3 when (or_ln148_25_fu_332_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln148_fu_278_p3 <= 
        zext_ln148_fu_268_p1 when (or_ln148_fu_262_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln135_16_fu_172_p2 <= (comparison_50_fu_106_p2 xor ap_const_lv1_1);
    xor_ln135_17_fu_190_p2 <= (comparison_51_fu_112_p2 xor ap_const_lv1_1);
    xor_ln135_18_fu_208_p2 <= (comparison_52_fu_118_p2 xor ap_const_lv1_1);
    xor_ln135_19_fu_226_p2 <= (comparison_53_fu_124_p2 xor ap_const_lv1_1);
    xor_ln135_20_fu_244_p2 <= (comparison_54_fu_130_p2 xor ap_const_lv1_1);
    xor_ln135_fu_154_p2 <= (comparison_49_fu_100_p2 xor ap_const_lv1_1);
    zext_ln148_7_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_22_fu_292_p3),3));
    zext_ln148_8_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_26_fu_352_p3),4));
    zext_ln148_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(activation_fu_142_p2),2));
end behav;
