-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_3 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_F1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111000111101111";
    constant ap_const_lv32_FFFF23F8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110010001111111000";
    constant ap_const_lv32_FFFF0786 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110000011110000110";
    constant ap_const_lv32_15A7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101101001111101";
    constant ap_const_lv32_A139 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010000100111001";
    constant ap_const_lv32_17182 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010111000110000010";
    constant ap_const_lv32_19CB9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011001110010111001";
    constant ap_const_lv32_FFFDFF60 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111011111111101100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_883F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000100000111111";
    constant ap_const_lv32_7075 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111000001110101";
    constant ap_const_lv32_4F11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100111100010001";
    constant ap_const_lv32_6D9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110110110011011";
    constant ap_const_lv32_FFFFF68D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111011010001101";
    constant ap_const_lv32_47EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100011111101110";
    constant ap_const_lv32_53C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101001111000011";
    constant ap_const_lv32_6291 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110001010010001";
    constant ap_const_lv32_FFFF0819 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110000100000011001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal comparison_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_72_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_66_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_5_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_67_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_181_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_6_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_68_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_182_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_7_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_69_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_184_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_8_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_70_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_189_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln135_9_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal comparison_71_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_193_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_194_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_fu_270_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln148_7_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_195_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_fu_280_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln148_8_fu_294_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln148_8_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_196_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_3_fu_302_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_9_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_197_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_9_fu_312_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_10_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_198_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_10_fu_326_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_11_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activation_199_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_11_fu_340_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln148_12_fu_354_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln148_12_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_4_fu_362_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_374_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_fu_374_p11 : STD_LOGIC_VECTOR (31 downto 0);

    component myproject_axi_mux_94_32_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_94_32_1_1_x_U36 : component myproject_axi_mux_94_32_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_883F,
        din1 => ap_const_lv32_7075,
        din2 => ap_const_lv32_4F11,
        din3 => ap_const_lv32_6D9B,
        din4 => ap_const_lv32_FFFFF68D,
        din5 => ap_const_lv32_47EE,
        din6 => ap_const_lv32_53C3,
        din7 => ap_const_lv32_6291,
        din8 => ap_const_lv32_FFFF0819,
        din9 => agg_result_fu_374_p10,
        dout => agg_result_fu_374_p11);




    activation_181_fu_180_p2 <= (xor_ln135_5_fu_174_p2 and activation_fu_162_p2);
    activation_182_fu_186_p2 <= (comparison_67_fu_120_p2 and activation_181_fu_180_p2);
    activation_184_fu_204_p2 <= (comparison_68_fu_126_p2 and activation_182_fu_186_p2);
    activation_189_fu_222_p2 <= (comparison_69_fu_132_p2 and activation_184_fu_204_p2);
    activation_193_fu_150_p2 <= (comparison_fu_102_p2 xor ap_const_lv1_1);
    activation_194_fu_168_p2 <= (comparison_66_fu_114_p2 and activation_fu_162_p2);
    activation_195_fu_198_p2 <= (xor_ln135_6_fu_192_p2 and activation_181_fu_180_p2);
    activation_196_fu_216_p2 <= (xor_ln135_7_fu_210_p2 and activation_182_fu_186_p2);
    activation_197_fu_234_p2 <= (xor_ln135_8_fu_228_p2 and activation_184_fu_204_p2);
    activation_198_fu_246_p2 <= (xor_ln135_9_fu_240_p2 and activation_189_fu_222_p2);
    activation_199_fu_258_p2 <= (comparison_70_fu_138_p2 and and_ln133_fu_252_p2);
    activation_fu_162_p2 <= (xor_ln135_fu_156_p2 and comparison_fu_102_p2);
    agg_result_fu_374_p10 <= 
        zext_ln148_4_fu_362_p1 when (or_ln148_12_fu_348_p2(0) = '1') else 
        ap_const_lv4_8;
    and_ln133_fu_252_p2 <= (comparison_71_fu_144_p2 and activation_189_fu_222_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= agg_result_fu_374_p11;
    comparison_66_fu_114_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_FFFF0786)) else "0";
    comparison_67_fu_120_p2 <= "1" when (signed(p_read4) < signed(ap_const_lv32_15A7D)) else "0";
    comparison_68_fu_126_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_A139)) else "0";
    comparison_69_fu_132_p2 <= "1" when (signed(p_read5) < signed(ap_const_lv32_17182)) else "0";
    comparison_70_fu_138_p2 <= "1" when (signed(p_read3) < signed(ap_const_lv32_19CB9)) else "0";
    comparison_71_fu_144_p2 <= "1" when (signed(p_read2) < signed(ap_const_lv32_FFFDFF60)) else "0";
    comparison_72_fu_108_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FFFF23F8)) else "0";
    comparison_fu_102_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_F1EF)) else "0";
    or_ln148_10_fu_320_p2 <= (or_ln148_9_fu_306_p2 or activation_197_fu_234_p2);
    or_ln148_11_fu_334_p2 <= (or_ln148_10_fu_320_p2 or activation_198_fu_246_p2);
    or_ln148_12_fu_348_p2 <= (or_ln148_11_fu_334_p2 or activation_199_fu_258_p2);
    or_ln148_7_fu_274_p2 <= (or_ln148_fu_264_p2 or activation_194_fu_168_p2);
    or_ln148_8_fu_288_p2 <= (or_ln148_7_fu_274_p2 or activation_195_fu_198_p2);
    or_ln148_9_fu_306_p2 <= (or_ln148_8_fu_288_p2 or activation_196_fu_216_p2);
    or_ln148_fu_264_p2 <= (comparison_72_fu_108_p2 or activation_193_fu_150_p2);
    select_ln148_10_fu_326_p3 <= 
        select_ln148_9_fu_312_p3 when (or_ln148_9_fu_306_p2(0) = '1') else 
        ap_const_lv3_5;
    select_ln148_11_fu_340_p3 <= 
        select_ln148_10_fu_326_p3 when (or_ln148_10_fu_320_p2(0) = '1') else 
        ap_const_lv3_6;
    select_ln148_12_fu_354_p3 <= 
        select_ln148_11_fu_340_p3 when (or_ln148_11_fu_334_p2(0) = '1') else 
        ap_const_lv3_7;
    select_ln148_8_fu_294_p3 <= 
        select_ln148_fu_280_p3 when (or_ln148_7_fu_274_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln148_9_fu_312_p3 <= 
        zext_ln148_3_fu_302_p1 when (or_ln148_8_fu_288_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln148_fu_280_p3 <= 
        zext_ln148_fu_270_p1 when (or_ln148_fu_264_p2(0) = '1') else 
        ap_const_lv2_2;
    xor_ln135_5_fu_174_p2 <= (comparison_66_fu_114_p2 xor ap_const_lv1_1);
    xor_ln135_6_fu_192_p2 <= (comparison_67_fu_120_p2 xor ap_const_lv1_1);
    xor_ln135_7_fu_210_p2 <= (comparison_68_fu_126_p2 xor ap_const_lv1_1);
    xor_ln135_8_fu_228_p2 <= (comparison_69_fu_132_p2 xor ap_const_lv1_1);
    xor_ln135_9_fu_240_p2 <= (comparison_70_fu_138_p2 xor ap_const_lv1_1);
    xor_ln135_fu_156_p2 <= (comparison_72_fu_108_p2 xor ap_const_lv1_1);
    zext_ln148_3_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_8_fu_294_p3),3));
    zext_ln148_4_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_12_fu_354_p3),4));
    zext_ln148_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(comparison_fu_102_p2),2));
end behav;
