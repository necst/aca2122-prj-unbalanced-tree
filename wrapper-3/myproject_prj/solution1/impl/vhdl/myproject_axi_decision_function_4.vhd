-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Version: 2020.1
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi_decision_function_4 is
port (
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myproject_axi_decision_function_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_FFFEA2A5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101010001010100101";
    constant ap_const_lv32_1480A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010100100000001010";
    constant ap_const_lv32_FFFE8984 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101000100110000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_ED9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001110110110011110";
    constant ap_const_lv32_BF7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011111101111100";
    constant ap_const_lv32_B89C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011100010011100";
    constant ap_const_lv32_FFFFB708 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111011011100001000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal icmp_ln1497_fu_48_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1497_7_fu_54_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln133_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln133_3_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1497_8_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_3_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln133_5_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln149_fu_108_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln148_4_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln149_fu_112_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_128_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_128_p6 : STD_LOGIC_VECTOR (31 downto 0);

    component myproject_axi_mux_42_32_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_42_32_1_1_x_U12 : component myproject_axi_mux_42_32_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_ED9E,
        din1 => ap_const_lv32_BF7C,
        din2 => ap_const_lv32_B89C,
        din3 => ap_const_lv32_FFFFB708,
        din4 => tmp_fu_128_p5,
        dout => tmp_fu_128_p6);




    and_ln133_3_fu_78_p2 <= (xor_ln133_fu_66_p2 and xor_ln133_3_fu_72_p2);
    and_ln133_5_fu_90_p2 <= (icmp_ln1497_7_fu_54_p2 and and_ln133_fu_84_p2);
    and_ln133_fu_84_p2 <= (xor_ln133_fu_66_p2 and icmp_ln1497_8_fu_60_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= tmp_fu_128_p6;
    icmp_ln1497_7_fu_54_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_1480A)) else "0";
    icmp_ln1497_8_fu_60_p2 <= "1" when (signed(p_read1) < signed(ap_const_lv32_FFFE8984)) else "0";
    icmp_ln1497_fu_48_p2 <= "1" when (signed(p_read) < signed(ap_const_lv32_FFFEA2A5)) else "0";
    or_ln148_4_fu_102_p2 <= (or_ln148_fu_96_p2 or and_ln133_5_fu_90_p2);
    or_ln148_fu_96_p2 <= (icmp_ln1497_fu_48_p2 or and_ln133_3_fu_78_p2);
    select_ln149_fu_112_p3 <= 
        zext_ln149_fu_108_p1 when (or_ln148_fu_96_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp_fu_128_p5 <= 
        select_ln149_fu_112_p3 when (or_ln148_4_fu_102_p2(0) = '1') else 
        ap_const_lv2_3;
    xor_ln133_3_fu_72_p2 <= (icmp_ln1497_7_fu_54_p2 xor ap_const_lv1_1);
    xor_ln133_fu_66_p2 <= (icmp_ln1497_fu_48_p2 xor ap_const_lv1_1);
    zext_ln149_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln133_fu_66_p2),2));
end behav;
