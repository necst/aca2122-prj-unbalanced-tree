-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi_myproject_axi,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.714000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=364,HLS_SYN_LUT=1209,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_data_V_1_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_4_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_5_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_6_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_7_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_8_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_9_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_reg_300 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln902_fu_210_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln902_reg_307 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_myproject_fu_121_ap_ready : STD_LOGIC;
    signal out_local_V_myproject_fu_121_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read4 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read5 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read6 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read7 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read8 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_local_V_myproject_fu_121_p_read9 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln902_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_226_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln901_fu_231_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_3_fu_238_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal regslice_both_out_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state12 : BOOLEAN;
    signal regslice_both_in_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_TVALID_int_regslice : STD_LOGIC;
    signal in_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_r_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_r_V_dest_V_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_r_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_r_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_r_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_axi_myproject IS
    port (
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_axi_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    out_local_V_myproject_fu_121 : component myproject_axi_myproject
    port map (
        ap_ready => out_local_V_myproject_fu_121_ap_ready,
        p_read => out_local_V_myproject_fu_121_p_read,
        p_read1 => out_local_V_myproject_fu_121_p_read1,
        p_read2 => out_local_V_myproject_fu_121_p_read2,
        p_read3 => out_local_V_myproject_fu_121_p_read3,
        p_read4 => out_local_V_myproject_fu_121_p_read4,
        p_read5 => out_local_V_myproject_fu_121_p_read5,
        p_read6 => out_local_V_myproject_fu_121_p_read6,
        p_read7 => out_local_V_myproject_fu_121_p_read7,
        p_read8 => out_local_V_myproject_fu_121_p_read8,
        p_read9 => out_local_V_myproject_fu_121_p_read9,
        ap_return => out_local_V_myproject_fu_121_ap_return);

    regslice_both_in_r_V_data_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int_regslice,
        vld_out => in_r_TVALID_int_regslice,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_data_V_U_apdone_blk);

    regslice_both_in_r_V_keep_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int_regslice,
        vld_out => regslice_both_in_r_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_keep_V_U_apdone_blk);

    regslice_both_in_r_V_strb_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int_regslice,
        vld_out => regslice_both_in_r_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_strb_V_U_apdone_blk);

    regslice_both_in_r_V_user_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TUSER,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_user_V_U_ack_in,
        data_out => in_r_TUSER_int_regslice,
        vld_out => regslice_both_in_r_V_user_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_user_V_U_apdone_blk);

    regslice_both_in_r_V_last_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int_regslice,
        vld_out => regslice_both_in_r_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_last_V_U_apdone_blk);

    regslice_both_in_r_V_id_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TID,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_id_V_U_ack_in,
        data_out => in_r_TID_int_regslice,
        vld_out => regslice_both_in_r_V_id_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_id_V_U_apdone_blk);

    regslice_both_in_r_V_dest_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDEST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_V_dest_V_U_ack_in,
        data_out => in_r_TDEST_int_regslice,
        vld_out => regslice_both_in_r_V_dest_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_V_dest_V_U_apdone_blk);

    regslice_both_out_r_V_data_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_data_V_U_apdone_blk);

    regslice_both_out_r_V_keep_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_r_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_keep_V_U_apdone_blk);

    regslice_both_out_r_V_strb_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_r_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_strb_V_U_apdone_blk);

    regslice_both_out_r_V_user_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_user_V_U_ack_in_dummy,
        data_out => out_r_TUSER,
        vld_out => regslice_both_out_r_V_user_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_user_V_U_apdone_blk);

    regslice_both_out_r_V_last_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_1,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_r_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_last_V_U_apdone_blk);

    regslice_both_out_r_V_id_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_id_V_U_ack_in_dummy,
        data_out => out_r_TID,
        vld_out => regslice_both_out_r_V_id_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_id_V_U_apdone_blk);

    regslice_both_out_r_V_dest_V_U : component myproject_axi_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_r_V_dest_V_U_ack_in_dummy,
        data_out => out_r_TDEST,
        vld_out => regslice_both_out_r_V_dest_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                out_local_V_reg_295 <= out_local_V_myproject_fu_121_ap_return;
                ret_V_reg_300 <= out_local_V_myproject_fu_121_ap_return(31 downto 16);
                trunc_ln902_reg_307 <= trunc_ln902_fu_210_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_data_V_1_reg_250 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_data_V_2_reg_255 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_data_V_3_reg_260 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_data_V_4_reg_265 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_data_V_5_reg_270 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_data_V_6_reg_275 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_data_V_7_reg_280 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_data_V_8_reg_285 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_data_V_9_reg_290 <= in_r_TDATA_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, regslice_both_out_r_V_data_V_U_apdone_blk, in_r_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (in_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (out_r_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(out_r_TREADY_int_regslice)
    begin
        if ((out_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
        if (((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(in_r_TVALID_int_regslice)
    begin
        if ((in_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state12_assign_proc : process(regslice_both_out_r_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state12 <= ((out_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_r_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln902_fu_221_p2 <= "1" when (trunc_ln902_reg_307 = ap_const_lv16_0) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, in_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int_regslice;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= regslice_both_in_r_V_data_V_U_ack_in;

    in_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, in_r_TVALID_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (in_r_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (in_r_TVALID_int_regslice = ap_const_logic_1)))) then 
            in_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    out_local_V_myproject_fu_121_p_read <= std_logic_vector(shift_left(unsigned(tmp_data_V_1_reg_250),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read1 <= std_logic_vector(shift_left(unsigned(tmp_data_V_2_reg_255),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read2 <= std_logic_vector(shift_left(unsigned(tmp_data_V_3_reg_260),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read3 <= std_logic_vector(shift_left(unsigned(tmp_data_V_4_reg_265),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read4 <= std_logic_vector(shift_left(unsigned(tmp_data_V_5_reg_270),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read5 <= std_logic_vector(shift_left(unsigned(tmp_data_V_6_reg_275),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read6 <= std_logic_vector(shift_left(unsigned(tmp_data_V_7_reg_280),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read7 <= std_logic_vector(shift_left(unsigned(tmp_data_V_8_reg_285),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read8 <= std_logic_vector(shift_left(unsigned(tmp_data_V_9_reg_290),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    out_local_V_myproject_fu_121_p_read9 <= std_logic_vector(shift_left(unsigned(in_r_TDATA_int_regslice),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_3_fu_238_p3),32));

    out_r_TVALID <= regslice_both_out_r_V_data_V_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state11, out_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (out_r_TREADY_int_regslice = ap_const_logic_1))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_214_p3 <= out_local_V_reg_295(31 downto 31);
    ret_V_1_fu_226_p2 <= std_logic_vector(unsigned(ret_V_reg_300) + unsigned(ap_const_lv16_1));
    ret_V_3_fu_238_p3 <= 
        select_ln901_fu_231_p3 when (p_Result_s_fu_214_p3(0) = '1') else 
        ret_V_reg_300;
    select_ln901_fu_231_p3 <= 
        ret_V_reg_300 when (icmp_ln902_fu_221_p2(0) = '1') else 
        ret_V_1_fu_226_p2;
    trunc_ln902_fu_210_p1 <= out_local_V_myproject_fu_121_ap_return(16 - 1 downto 0);
end behav;
