// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
// Version: 2020.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_axi_decision_function_6 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        p_read3,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

wire   [0:0] comparison_fu_56_p2;
reg   [0:0] comparison_reg_143;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] comparison_4_fu_62_p2;
reg   [0:0] comparison_4_reg_148;
wire   [0:0] comparison_5_fu_68_p2;
reg   [0:0] comparison_5_reg_154;
wire   [0:0] activation_fu_74_p2;
reg   [0:0] activation_reg_159;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln135_fu_80_p2;
wire   [0:0] and_ln133_fu_90_p2;
wire   [0:0] activation_6_fu_85_p2;
wire   [0:0] or_ln148_fu_99_p2;
wire   [0:0] activation_7_fu_94_p2;
wire   [1:0] zext_ln148_fu_104_p1;
wire   [0:0] or_ln148_2_fu_107_p2;
wire   [1:0] select_ln148_fu_113_p3;
wire   [1:0] agg_result_fu_129_p5;
wire   [31:0] agg_result_fu_129_p6;
reg    ap_ce_reg;
reg   [31:0] ap_return_int_reg;

myproject_axi_mux_42_32_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_0_U5(
    .din0(32'd54055),
    .din1(32'd53236),
    .din2(32'd4294947233),
    .din3(32'd54938),
    .din4(agg_result_fu_129_p5),
    .dout(agg_result_fu_129_p6)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        activation_reg_159 <= activation_fu_74_p2;
        comparison_4_reg_148 <= comparison_4_fu_62_p2;
        comparison_5_reg_154 <= comparison_5_fu_68_p2;
        comparison_reg_143 <= comparison_fu_56_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_129_p6;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_129_p6;
    end else begin
        ap_return = 'bx;
    end
end

assign activation_6_fu_85_p2 = (xor_ln135_fu_80_p2 & activation_reg_159);

assign activation_7_fu_94_p2 = (comparison_4_reg_148 & and_ln133_fu_90_p2);

assign activation_fu_74_p2 = (comparison_fu_56_p2 ^ 1'd1);

assign agg_result_fu_129_p5 = ((or_ln148_2_fu_107_p2[0:0] == 1'b1) ? select_ln148_fu_113_p3 : 2'd3);

assign and_ln133_fu_90_p2 = (comparison_5_reg_154 & activation_reg_159);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign comparison_4_fu_62_p2 = (($signed(p_read3) < $signed(32'd80643)) ? 1'b1 : 1'b0);

assign comparison_5_fu_68_p2 = (($signed(p_read1) < $signed(32'd95619)) ? 1'b1 : 1'b0);

assign comparison_fu_56_p2 = (($signed(p_read2) < $signed(32'd4294894227)) ? 1'b1 : 1'b0);

assign or_ln148_2_fu_107_p2 = (or_ln148_fu_99_p2 | activation_7_fu_94_p2);

assign or_ln148_fu_99_p2 = (comparison_reg_143 | activation_6_fu_85_p2);

assign select_ln148_fu_113_p3 = ((or_ln148_fu_99_p2[0:0] == 1'b1) ? zext_ln148_fu_104_p1 : 2'd2);

assign xor_ln135_fu_80_p2 = (comparison_4_reg_148 ^ 1'd1);

assign zext_ln148_fu_104_p1 = activation_reg_159;

endmodule //myproject_axi_decision_function_6
