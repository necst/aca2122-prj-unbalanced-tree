// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
// Version: 2020.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_axi_decision_function_2 (
        ap_clk,
        ap_rst,
        p_read1,
        p_read2,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] p_read1;
input  [31:0] p_read2;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

wire   [0:0] comparison_fu_48_p2;
reg   [0:0] comparison_reg_135;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] comparison_12_fu_54_p2;
reg   [0:0] comparison_12_reg_140;
wire   [0:0] comparison_13_fu_60_p2;
reg   [0:0] comparison_13_reg_146;
wire   [0:0] activation_fu_66_p2;
reg   [0:0] activation_reg_151;
wire    ap_block_pp0_stage0;
wire   [0:0] xor_ln135_fu_72_p2;
wire   [0:0] and_ln133_fu_82_p2;
wire   [0:0] activation_26_fu_77_p2;
wire   [0:0] or_ln148_fu_91_p2;
wire   [0:0] activation_27_fu_86_p2;
wire   [1:0] zext_ln148_fu_96_p1;
wire   [0:0] or_ln148_3_fu_99_p2;
wire   [1:0] select_ln148_fu_105_p3;
wire   [1:0] agg_result_fu_121_p5;
wire   [31:0] agg_result_fu_121_p6;
reg    ap_ce_reg;
reg   [31:0] ap_return_int_reg;

myproject_axi_mux_42_32_1_0_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_0_x_U19(
    .din0(32'd47903),
    .din1(32'd61689),
    .din2(32'd20136),
    .din3(32'd4294944993),
    .din4(agg_result_fu_121_p5),
    .dout(agg_result_fu_121_p6)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        activation_reg_151 <= activation_fu_66_p2;
        comparison_12_reg_140 <= comparison_12_fu_54_p2;
        comparison_13_reg_146 <= comparison_13_fu_60_p2;
        comparison_reg_135 <= comparison_fu_48_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= agg_result_fu_121_p6;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = agg_result_fu_121_p6;
    end else begin
        ap_return = 'bx;
    end
end

assign activation_26_fu_77_p2 = (xor_ln135_fu_72_p2 & activation_reg_151);

assign activation_27_fu_86_p2 = (comparison_12_reg_140 & and_ln133_fu_82_p2);

assign activation_fu_66_p2 = (comparison_fu_48_p2 ^ 1'd1);

assign agg_result_fu_121_p5 = ((or_ln148_3_fu_99_p2[0:0] == 1'b1) ? select_ln148_fu_105_p3 : 2'd3);

assign and_ln133_fu_82_p2 = (comparison_13_reg_146 & activation_reg_151);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign comparison_12_fu_54_p2 = (($signed(p_read1) < $signed(32'd97881)) ? 1'b1 : 1'b0);

assign comparison_13_fu_60_p2 = (($signed(p_read2) < $signed(32'd4294913804)) ? 1'b1 : 1'b0);

assign comparison_fu_48_p2 = (($signed(p_read1) < $signed(32'd4294894727)) ? 1'b1 : 1'b0);

assign or_ln148_3_fu_99_p2 = (or_ln148_fu_91_p2 | activation_27_fu_86_p2);

assign or_ln148_fu_91_p2 = (comparison_reg_135 | activation_26_fu_77_p2);

assign select_ln148_fu_105_p3 = ((or_ln148_fu_91_p2[0:0] == 1'b1) ? zext_ln148_fu_96_p1 : 2'd2);

assign xor_ln135_fu_72_p2 = (comparison_12_reg_140 ^ 1'd1);

assign zext_ln148_fu_96_p1 = activation_reg_151;

endmodule //myproject_axi_decision_function_2
